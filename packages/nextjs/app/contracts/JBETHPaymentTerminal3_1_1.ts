/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type JBTokenAmountStruct = {
  token: string;
  value: BigNumberish;
  decimals: BigNumberish;
  currency: BigNumberish;
};

export type JBTokenAmountStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  token: string;
  value: BigNumber;
  decimals: BigNumber;
  currency: BigNumber;
};

export type JBDidPayDataStruct = {
  payer: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  amount: JBTokenAmountStruct;
  forwardedAmount: JBTokenAmountStruct;
  projectTokenCount: BigNumberish;
  beneficiary: string;
  preferClaimedTokens: boolean;
  memo: string;
  metadata: BytesLike;
};

export type JBDidPayDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  JBTokenAmountStructOutput,
  BigNumber,
  string,
  boolean,
  string,
  string
] & {
  payer: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  amount: JBTokenAmountStructOutput;
  forwardedAmount: JBTokenAmountStructOutput;
  projectTokenCount: BigNumber;
  beneficiary: string;
  preferClaimedTokens: boolean;
  memo: string;
  metadata: string;
};

export type JBDidPayData3_1_1Struct = {
  payer: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  amount: JBTokenAmountStruct;
  forwardedAmount: JBTokenAmountStruct;
  projectTokenCount: BigNumberish;
  beneficiary: string;
  preferClaimedTokens: boolean;
  memo: string;
  dataSourceMetadata: BytesLike;
  payerMetadata: BytesLike;
};

export type JBDidPayData3_1_1StructOutput = [
  string,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  JBTokenAmountStructOutput,
  BigNumber,
  string,
  boolean,
  string,
  string,
  string
] & {
  payer: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  amount: JBTokenAmountStructOutput;
  forwardedAmount: JBTokenAmountStructOutput;
  projectTokenCount: BigNumber;
  beneficiary: string;
  preferClaimedTokens: boolean;
  memo: string;
  dataSourceMetadata: string;
  payerMetadata: string;
};

export type JBDidRedeemDataStruct = {
  holder: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  projectTokenCount: BigNumberish;
  reclaimedAmount: JBTokenAmountStruct;
  forwardedAmount: JBTokenAmountStruct;
  beneficiary: string;
  memo: string;
  metadata: BytesLike;
};

export type JBDidRedeemDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  JBTokenAmountStructOutput,
  string,
  string,
  string
] & {
  holder: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  projectTokenCount: BigNumber;
  reclaimedAmount: JBTokenAmountStructOutput;
  forwardedAmount: JBTokenAmountStructOutput;
  beneficiary: string;
  memo: string;
  metadata: string;
};

export type JBDidRedeemData3_1_1Struct = {
  holder: string;
  projectId: BigNumberish;
  currentFundingCycleConfiguration: BigNumberish;
  projectTokenCount: BigNumberish;
  reclaimedAmount: JBTokenAmountStruct;
  forwardedAmount: JBTokenAmountStruct;
  beneficiary: string;
  memo: string;
  dataSourceMetadata: BytesLike;
  redeemerMetadata: BytesLike;
};

export type JBDidRedeemData3_1_1StructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  JBTokenAmountStructOutput,
  JBTokenAmountStructOutput,
  string,
  string,
  string,
  string
] & {
  holder: string;
  projectId: BigNumber;
  currentFundingCycleConfiguration: BigNumber;
  projectTokenCount: BigNumber;
  reclaimedAmount: JBTokenAmountStructOutput;
  forwardedAmount: JBTokenAmountStructOutput;
  beneficiary: string;
  memo: string;
  dataSourceMetadata: string;
  redeemerMetadata: string;
};

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export type JBFeeStruct = {
  amount: BigNumberish;
  fee: BigNumberish;
  feeDiscount: BigNumberish;
  beneficiary: string;
};

export type JBFeeStructOutput = [BigNumber, number, number, string] & {
  amount: BigNumber;
  fee: number;
  feeDiscount: number;
  beneficiary: string;
};

export interface JBETHPaymentTerminal3_1_1Interface extends utils.Interface {
  functions: {
    "acceptsToken(address,uint256)": FunctionFragment;
    "addToBalanceOf(uint256,uint256,address,string,bytes)": FunctionFragment;
    "addToBalanceOf(uint256,uint256,address,bool,string,bytes)": FunctionFragment;
    "baseWeightCurrency()": FunctionFragment;
    "currency()": FunctionFragment;
    "currencyForToken(address)": FunctionFragment;
    "currentEthOverflowOf(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decimalsForToken(address)": FunctionFragment;
    "directory()": FunctionFragment;
    "distributePayoutsOf(uint256,uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeGauge()": FunctionFragment;
    "heldFeesOf(uint256)": FunctionFragment;
    "isFeelessAddress(address)": FunctionFragment;
    "migrate(uint256,address)": FunctionFragment;
    "operatorStore()": FunctionFragment;
    "owner()": FunctionFragment;
    "pay(uint256,uint256,address,address,uint256,bool,string,bytes)": FunctionFragment;
    "payoutSplitsGroup()": FunctionFragment;
    "prices()": FunctionFragment;
    "processFees(uint256)": FunctionFragment;
    "projects()": FunctionFragment;
    "redeemTokensOf(address,uint256,uint256,address,uint256,address,string,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeGauge(address)": FunctionFragment;
    "setFeelessAddress(address,bool)": FunctionFragment;
    "splitsStore()": FunctionFragment;
    "store()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "useAllowanceOf(uint256,uint256,uint256,address,uint256,address,string,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptsToken"
      | "addToBalanceOf(uint256,uint256,address,string,bytes)"
      | "addToBalanceOf(uint256,uint256,address,bool,string,bytes)"
      | "baseWeightCurrency"
      | "currency"
      | "currencyForToken"
      | "currentEthOverflowOf"
      | "decimals"
      | "decimalsForToken"
      | "directory"
      | "distributePayoutsOf"
      | "fee"
      | "feeGauge"
      | "heldFeesOf"
      | "isFeelessAddress"
      | "migrate"
      | "operatorStore"
      | "owner"
      | "pay"
      | "payoutSplitsGroup"
      | "prices"
      | "processFees"
      | "projects"
      | "redeemTokensOf"
      | "renounceOwnership"
      | "setFee"
      | "setFeeGauge"
      | "setFeelessAddress"
      | "splitsStore"
      | "store"
      | "supportsInterface"
      | "token"
      | "transferOwnership"
      | "useAllowanceOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptsToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBalanceOf(uint256,uint256,address,string,bytes)",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBalanceOf(uint256,uint256,address,bool,string,bytes)",
    values: [BigNumberish, BigNumberish, string, boolean, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseWeightCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currencyForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEthOverflowOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimalsForToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributePayoutsOf",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeGauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "heldFeesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeelessAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      boolean,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutSplitsGroup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemTokensOf",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeeGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeelessAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "useAllowanceOf",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBalanceOf(uint256,uint256,address,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBalanceOf(uint256,uint256,address,bool,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWeightCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currencyForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEthOverflowOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributePayoutsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heldFeesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeelessAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutSplitsGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemTokensOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeelessAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitsStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useAllowanceOf",
    data: BytesLike
  ): Result;

  events: {
    "AddToBalance(uint256,uint256,uint256,string,bytes,address)": EventFragment;
    "DelegateDidPay(address,(address,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),uint256,address,bool,string,bytes),uint256,address)": EventFragment;
    "DelegateDidPay(address,(address,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),uint256,address,bool,string,bytes,bytes),uint256,address)": EventFragment;
    "DelegateDidRedeem(address,(address,uint256,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),address,string,bytes),uint256,address)": EventFragment;
    "DelegateDidRedeem(address,(address,uint256,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),address,string,bytes,bytes),uint256,uint256,address)": EventFragment;
    "DistributePayouts(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,address)": EventFragment;
    "DistributeToPayoutSplit(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address),uint256,uint256,address)": EventFragment;
    "FeeReverted(uint256,uint256,uint256,bytes,address)": EventFragment;
    "HoldFee(uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Migrate(uint256,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pay(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)": EventFragment;
    "PayoutReverted(uint256,(bool,bool,uint256,uint256,address,uint256,address),uint256,bytes,address)": EventFragment;
    "ProcessFee(uint256,uint256,bool,address,address)": EventFragment;
    "RedeemTokens(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)": EventFragment;
    "RefundHeldFees(uint256,uint256,uint256,uint256,address)": EventFragment;
    "SetFee(uint256,address)": EventFragment;
    "SetFeeGauge(address,address)": EventFragment;
    "SetFeelessAddress(address,bool,address)": EventFragment;
    "UseAllowance(uint256,uint256,uint256,address,uint256,uint256,uint256,string,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToBalance"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegateDidPay(address,(address,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),uint256,address,bool,string,bytes),uint256,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegateDidPay(address,(address,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),uint256,address,bool,string,bytes,bytes),uint256,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegateDidRedeem(address,(address,uint256,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),address,string,bytes),uint256,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DelegateDidRedeem(address,(address,uint256,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),address,string,bytes,bytes),uint256,uint256,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributePayouts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeToPayoutSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundHeldFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeGauge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeelessAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseAllowance"): EventFragment;
}

export interface AddToBalanceEventObject {
  projectId: BigNumber;
  amount: BigNumber;
  refundedFees: BigNumber;
  memo: string;
  metadata: string;
  caller: string;
}
export type AddToBalanceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string],
  AddToBalanceEventObject
>;

export type AddToBalanceEventFilter = TypedEventFilter<AddToBalanceEvent>;

export interface DelegateDidPay_address_tuple_uint256_address_EventObject {
  delegate: string;
  data: JBDidPayDataStructOutput;
  delegatedAmount: BigNumber;
  caller: string;
}
export type DelegateDidPay_address_tuple_uint256_address_Event = TypedEvent<
  [string, JBDidPayDataStructOutput, BigNumber, string],
  DelegateDidPay_address_tuple_uint256_address_EventObject
>;

export type DelegateDidPay_address_tuple_uint256_address_EventFilter =
  TypedEventFilter<DelegateDidPay_address_tuple_uint256_address_Event>;

export interface DelegateDidPay_address_tuple_uint256_address_EventObject {
  delegate: string;
  data: JBDidPayData3_1_1StructOutput;
  delegatedAmount: BigNumber;
  caller: string;
}
export type DelegateDidPay_address_tuple_uint256_address_Event = TypedEvent<
  [string, JBDidPayData3_1_1StructOutput, BigNumber, string],
  DelegateDidPay_address_tuple_uint256_address_EventObject
>;

export type DelegateDidPay_address_tuple_uint256_address_EventFilter =
  TypedEventFilter<DelegateDidPay_address_tuple_uint256_address_Event>;

export interface DelegateDidRedeem_address_tuple_uint256_address_EventObject {
  delegate: string;
  data: JBDidRedeemDataStructOutput;
  delegatedAmount: BigNumber;
  caller: string;
}
export type DelegateDidRedeem_address_tuple_uint256_address_Event = TypedEvent<
  [string, JBDidRedeemDataStructOutput, BigNumber, string],
  DelegateDidRedeem_address_tuple_uint256_address_EventObject
>;

export type DelegateDidRedeem_address_tuple_uint256_address_EventFilter =
  TypedEventFilter<DelegateDidRedeem_address_tuple_uint256_address_Event>;

export interface DelegateDidRedeem_address_tuple_uint256_uint256_address_EventObject {
  delegate: string;
  data: JBDidRedeemData3_1_1StructOutput;
  delegatedAmount: BigNumber;
  fee: BigNumber;
  caller: string;
}
export type DelegateDidRedeem_address_tuple_uint256_uint256_address_Event =
  TypedEvent<
    [string, JBDidRedeemData3_1_1StructOutput, BigNumber, BigNumber, string],
    DelegateDidRedeem_address_tuple_uint256_uint256_address_EventObject
  >;

export type DelegateDidRedeem_address_tuple_uint256_uint256_address_EventFilter =
  TypedEventFilter<DelegateDidRedeem_address_tuple_uint256_uint256_address_Event>;

export interface DistributePayoutsEventObject {
  fundingCycleConfiguration: BigNumber;
  fundingCycleNumber: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  distributedAmount: BigNumber;
  fee: BigNumber;
  beneficiaryDistributionAmount: BigNumber;
  metadata: string;
  caller: string;
}
export type DistributePayoutsEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  DistributePayoutsEventObject
>;

export type DistributePayoutsEventFilter =
  TypedEventFilter<DistributePayoutsEvent>;

export interface DistributeToPayoutSplitEventObject {
  projectId: BigNumber;
  domain: BigNumber;
  group: BigNumber;
  split: JBSplitStructOutput;
  amount: BigNumber;
  netAmount: BigNumber;
  caller: string;
}
export type DistributeToPayoutSplitEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    JBSplitStructOutput,
    BigNumber,
    BigNumber,
    string
  ],
  DistributeToPayoutSplitEventObject
>;

export type DistributeToPayoutSplitEventFilter =
  TypedEventFilter<DistributeToPayoutSplitEvent>;

export interface FeeRevertedEventObject {
  projectId: BigNumber;
  feeProjectId: BigNumber;
  amount: BigNumber;
  reason: string;
  caller: string;
}
export type FeeRevertedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  FeeRevertedEventObject
>;

export type FeeRevertedEventFilter = TypedEventFilter<FeeRevertedEvent>;

export interface HoldFeeEventObject {
  projectId: BigNumber;
  amount: BigNumber;
  fee: BigNumber;
  feeDiscount: BigNumber;
  beneficiary: string;
  caller: string;
}
export type HoldFeeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  HoldFeeEventObject
>;

export type HoldFeeEventFilter = TypedEventFilter<HoldFeeEvent>;

export interface MigrateEventObject {
  projectId: BigNumber;
  to: string;
  amount: BigNumber;
  caller: string;
}
export type MigrateEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  MigrateEventObject
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayEventObject {
  fundingCycleConfiguration: BigNumber;
  fundingCycleNumber: BigNumber;
  projectId: BigNumber;
  payer: string;
  beneficiary: string;
  amount: BigNumber;
  beneficiaryTokenCount: BigNumber;
  memo: string;
  metadata: string;
  caller: string;
}
export type PayEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  PayEventObject
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export interface PayoutRevertedEventObject {
  projectId: BigNumber;
  split: JBSplitStructOutput;
  amount: BigNumber;
  reason: string;
  caller: string;
}
export type PayoutRevertedEvent = TypedEvent<
  [BigNumber, JBSplitStructOutput, BigNumber, string, string],
  PayoutRevertedEventObject
>;

export type PayoutRevertedEventFilter = TypedEventFilter<PayoutRevertedEvent>;

export interface ProcessFeeEventObject {
  projectId: BigNumber;
  amount: BigNumber;
  wasHeld: boolean;
  beneficiary: string;
  caller: string;
}
export type ProcessFeeEvent = TypedEvent<
  [BigNumber, BigNumber, boolean, string, string],
  ProcessFeeEventObject
>;

export type ProcessFeeEventFilter = TypedEventFilter<ProcessFeeEvent>;

export interface RedeemTokensEventObject {
  fundingCycleConfiguration: BigNumber;
  fundingCycleNumber: BigNumber;
  projectId: BigNumber;
  holder: string;
  beneficiary: string;
  tokenCount: BigNumber;
  reclaimedAmount: BigNumber;
  memo: string;
  metadata: string;
  caller: string;
}
export type RedeemTokensEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  RedeemTokensEventObject
>;

export type RedeemTokensEventFilter = TypedEventFilter<RedeemTokensEvent>;

export interface RefundHeldFeesEventObject {
  projectId: BigNumber;
  amount: BigNumber;
  refundedFees: BigNumber;
  leftoverAmount: BigNumber;
  caller: string;
}
export type RefundHeldFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  RefundHeldFeesEventObject
>;

export type RefundHeldFeesEventFilter = TypedEventFilter<RefundHeldFeesEvent>;

export interface SetFeeEventObject {
  fee: BigNumber;
  caller: string;
}
export type SetFeeEvent = TypedEvent<[BigNumber, string], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetFeeGaugeEventObject {
  feeGauge: string;
  caller: string;
}
export type SetFeeGaugeEvent = TypedEvent<
  [string, string],
  SetFeeGaugeEventObject
>;

export type SetFeeGaugeEventFilter = TypedEventFilter<SetFeeGaugeEvent>;

export interface SetFeelessAddressEventObject {
  addrs: string;
  flag: boolean;
  caller: string;
}
export type SetFeelessAddressEvent = TypedEvent<
  [string, boolean, string],
  SetFeelessAddressEventObject
>;

export type SetFeelessAddressEventFilter =
  TypedEventFilter<SetFeelessAddressEvent>;

export interface UseAllowanceEventObject {
  fundingCycleConfiguration: BigNumber;
  fundingCycleNumber: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  distributedAmount: BigNumber;
  netDistributedamount: BigNumber;
  memo: string;
  metadata: string;
  caller: string;
}
export type UseAllowanceEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ],
  UseAllowanceEventObject
>;

export type UseAllowanceEventFilter = TypedEventFilter<UseAllowanceEvent>;

export interface JBETHPaymentTerminal3_1_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBETHPaymentTerminal3_1_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "addToBalanceOf(uint256,uint256,address,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "addToBalanceOf(uint256,uint256,address,bool,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _shouldRefundHeldFees: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    baseWeightCurrency(overrides?: CallOverrides): Promise<[BigNumber]>;

    currency(overrides?: CallOverrides): Promise<[BigNumber]>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    directory(overrides?: CallOverrides): Promise<[string]>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGauge(overrides?: CallOverrides): Promise<[string]>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[JBFeeStructOutput[]]>;

    isFeelessAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    operatorStore(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<[BigNumber]>;

    prices(overrides?: CallOverrides): Promise<[string]>;

    processFees(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeGauge(
      _feeGauge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeelessAddress(
      _address: string,
      _flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<[string]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptsToken(
    _token: string,
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "addToBalanceOf(uint256,uint256,address,string,bytes)"(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "addToBalanceOf(uint256,uint256,address,bool,string,bytes)"(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    _shouldRefundHeldFees: boolean,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  baseWeightCurrency(overrides?: CallOverrides): Promise<BigNumber>;

  currency(overrides?: CallOverrides): Promise<BigNumber>;

  currencyForToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentEthOverflowOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  decimalsForToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  directory(overrides?: CallOverrides): Promise<string>;

  distributePayoutsOf(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _currency: BigNumberish,
    _token: string,
    _minReturnedTokens: BigNumberish,
    _metadata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeGauge(overrides?: CallOverrides): Promise<string>;

  heldFeesOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBFeeStructOutput[]>;

  isFeelessAddress(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  migrate(
    _projectId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  operatorStore(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pay(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    _beneficiary: string,
    _minReturnedTokens: BigNumberish,
    _preferClaimedTokens: boolean,
    _memo: string,
    _metadata: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  payoutSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

  prices(overrides?: CallOverrides): Promise<string>;

  processFees(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  projects(overrides?: CallOverrides): Promise<string>;

  redeemTokensOf(
    _holder: string,
    _projectId: BigNumberish,
    _tokenCount: BigNumberish,
    _token: string,
    _minReturnedTokens: BigNumberish,
    _beneficiary: string,
    _memo: string,
    _metadata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeGauge(
    _feeGauge: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeelessAddress(
    _address: string,
    _flag: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  splitsStore(overrides?: CallOverrides): Promise<string>;

  store(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  useAllowanceOf(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _currency: BigNumberish,
    _token: string,
    _minReturnedTokens: BigNumberish,
    _beneficiary: string,
    _memo: string,
    _metadata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addToBalanceOf(uint256,uint256,address,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addToBalanceOf(uint256,uint256,address,bool,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _shouldRefundHeldFees: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    baseWeightCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<string>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeGauge(overrides?: CallOverrides): Promise<string>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBFeeStructOutput[]>;

    isFeelessAddress(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorStore(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<string>;

    processFees(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    projects(overrides?: CallOverrides): Promise<string>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeGauge(_feeGauge: string, overrides?: CallOverrides): Promise<void>;

    setFeelessAddress(
      _address: string,
      _flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    splitsStore(overrides?: CallOverrides): Promise<string>;

    store(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddToBalance(uint256,uint256,uint256,string,bytes,address)"(
      projectId?: BigNumberish | null,
      amount?: null,
      refundedFees?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): AddToBalanceEventFilter;
    AddToBalance(
      projectId?: BigNumberish | null,
      amount?: null,
      refundedFees?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): AddToBalanceEventFilter;

    "DelegateDidPay(address,(address,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),uint256,address,bool,string,bytes),uint256,address)"(
      delegate?: string | null,
      data?: null,
      delegatedAmount?: null,
      caller?: null
    ): DelegateDidPay_address_tuple_uint256_address_EventFilter;
    "DelegateDidPay(address,(address,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),uint256,address,bool,string,bytes,bytes),uint256,address)"(
      delegate?: string | null,
      data?: null,
      delegatedAmount?: null,
      caller?: null
    ): DelegateDidPay_address_tuple_uint256_address_EventFilter;
    "DelegateDidRedeem(address,(address,uint256,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),address,string,bytes),uint256,address)"(
      delegate?: string | null,
      data?: null,
      delegatedAmount?: null,
      caller?: null
    ): DelegateDidRedeem_address_tuple_uint256_address_EventFilter;
    "DelegateDidRedeem(address,(address,uint256,uint256,uint256,(address,uint256,uint256,uint256),(address,uint256,uint256,uint256),address,string,bytes,bytes),uint256,uint256,address)"(
      delegate?: string | null,
      data?: null,
      delegatedAmount?: null,
      fee?: null,
      caller?: null
    ): DelegateDidRedeem_address_tuple_uint256_uint256_address_EventFilter;

    "DistributePayouts(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      fee?: null,
      beneficiaryDistributionAmount?: null,
      metadata?: null,
      caller?: null
    ): DistributePayoutsEventFilter;
    DistributePayouts(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      fee?: null,
      beneficiaryDistributionAmount?: null,
      metadata?: null,
      caller?: null
    ): DistributePayoutsEventFilter;

    "DistributeToPayoutSplit(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address),uint256,uint256,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      amount?: null,
      netAmount?: null,
      caller?: null
    ): DistributeToPayoutSplitEventFilter;
    DistributeToPayoutSplit(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      amount?: null,
      netAmount?: null,
      caller?: null
    ): DistributeToPayoutSplitEventFilter;

    "FeeReverted(uint256,uint256,uint256,bytes,address)"(
      projectId?: BigNumberish | null,
      feeProjectId?: BigNumberish | null,
      amount?: null,
      reason?: null,
      caller?: null
    ): FeeRevertedEventFilter;
    FeeReverted(
      projectId?: BigNumberish | null,
      feeProjectId?: BigNumberish | null,
      amount?: null,
      reason?: null,
      caller?: null
    ): FeeRevertedEventFilter;

    "HoldFee(uint256,uint256,uint256,uint256,address,address)"(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      fee?: BigNumberish | null,
      feeDiscount?: null,
      beneficiary?: null,
      caller?: null
    ): HoldFeeEventFilter;
    HoldFee(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      fee?: BigNumberish | null,
      feeDiscount?: null,
      beneficiary?: null,
      caller?: null
    ): HoldFeeEventFilter;

    "Migrate(uint256,address,uint256,address)"(
      projectId?: BigNumberish | null,
      to?: string | null,
      amount?: null,
      caller?: null
    ): MigrateEventFilter;
    Migrate(
      projectId?: BigNumberish | null,
      to?: string | null,
      amount?: null,
      caller?: null
    ): MigrateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pay(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      payer?: null,
      beneficiary?: null,
      amount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): PayEventFilter;
    Pay(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      payer?: null,
      beneficiary?: null,
      amount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): PayEventFilter;

    "PayoutReverted(uint256,(bool,bool,uint256,uint256,address,uint256,address),uint256,bytes,address)"(
      projectId?: BigNumberish | null,
      split?: null,
      amount?: null,
      reason?: null,
      caller?: null
    ): PayoutRevertedEventFilter;
    PayoutReverted(
      projectId?: BigNumberish | null,
      split?: null,
      amount?: null,
      reason?: null,
      caller?: null
    ): PayoutRevertedEventFilter;

    "ProcessFee(uint256,uint256,bool,address,address)"(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      wasHeld?: boolean | null,
      beneficiary?: null,
      caller?: null
    ): ProcessFeeEventFilter;
    ProcessFee(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      wasHeld?: boolean | null,
      beneficiary?: null,
      caller?: null
    ): ProcessFeeEventFilter;

    "RedeemTokens(uint256,uint256,uint256,address,address,uint256,uint256,string,bytes,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      holder?: null,
      beneficiary?: null,
      tokenCount?: null,
      reclaimedAmount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): RedeemTokensEventFilter;
    RedeemTokens(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      holder?: null,
      beneficiary?: null,
      tokenCount?: null,
      reclaimedAmount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): RedeemTokensEventFilter;

    "RefundHeldFees(uint256,uint256,uint256,uint256,address)"(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      refundedFees?: BigNumberish | null,
      leftoverAmount?: null,
      caller?: null
    ): RefundHeldFeesEventFilter;
    RefundHeldFees(
      projectId?: BigNumberish | null,
      amount?: BigNumberish | null,
      refundedFees?: BigNumberish | null,
      leftoverAmount?: null,
      caller?: null
    ): RefundHeldFeesEventFilter;

    "SetFee(uint256,address)"(fee?: null, caller?: null): SetFeeEventFilter;
    SetFee(fee?: null, caller?: null): SetFeeEventFilter;

    "SetFeeGauge(address,address)"(
      feeGauge?: string | null,
      caller?: null
    ): SetFeeGaugeEventFilter;
    SetFeeGauge(
      feeGauge?: string | null,
      caller?: null
    ): SetFeeGaugeEventFilter;

    "SetFeelessAddress(address,bool,address)"(
      addrs?: string | null,
      flag?: boolean | null,
      caller?: null
    ): SetFeelessAddressEventFilter;
    SetFeelessAddress(
      addrs?: string | null,
      flag?: boolean | null,
      caller?: null
    ): SetFeelessAddressEventFilter;

    "UseAllowance(uint256,uint256,uint256,address,uint256,uint256,uint256,string,bytes,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      netDistributedamount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): UseAllowanceEventFilter;
    UseAllowance(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      amount?: null,
      distributedAmount?: null,
      netDistributedamount?: null,
      memo?: null,
      metadata?: null,
      caller?: null
    ): UseAllowanceEventFilter;
  };

  estimateGas: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addToBalanceOf(uint256,uint256,address,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "addToBalanceOf(uint256,uint256,address,bool,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _shouldRefundHeldFees: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    baseWeightCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<BigNumber>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeGauge(overrides?: CallOverrides): Promise<BigNumber>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFeelessAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    operatorStore(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    processFees(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeGauge(
      _feeGauge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeelessAddress(
      _address: string,
      _flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    splitsStore(overrides?: CallOverrides): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptsToken(
      _token: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addToBalanceOf(uint256,uint256,address,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "addToBalanceOf(uint256,uint256,address,bool,string,bytes)"(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _shouldRefundHeldFees: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    baseWeightCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currencyForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEthOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimalsForToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributePayoutsOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heldFeesOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFeelessAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    operatorStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      _beneficiary: string,
      _minReturnedTokens: BigNumberish,
      _preferClaimedTokens: boolean,
      _memo: string,
      _metadata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payoutSplitsGroup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processFees(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeGauge(
      _feeGauge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeelessAddress(
      _address: string,
      _flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    useAllowanceOf(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _token: string,
      _minReturnedTokens: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _metadata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
