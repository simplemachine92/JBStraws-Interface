/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export type JBFundingCycleStruct = {
  number: BigNumberish;
  configuration: BigNumberish;
  basedOn: BigNumberish;
  start: BigNumberish;
  duration: BigNumberish;
  weight: BigNumberish;
  discountRate: BigNumberish;
  ballot: string;
  metadata: BigNumberish;
};

export type JBFundingCycleStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  number: BigNumber;
  configuration: BigNumber;
  basedOn: BigNumber;
  start: BigNumber;
  duration: BigNumber;
  weight: BigNumber;
  discountRate: BigNumber;
  ballot: string;
  metadata: BigNumber;
};

export type JBGlobalFundingCycleMetadataStruct = {
  allowSetTerminals: boolean;
  allowSetController: boolean;
  pauseTransfers: boolean;
};

export type JBGlobalFundingCycleMetadataStructOutput = [
  boolean,
  boolean,
  boolean
] & {
  allowSetTerminals: boolean;
  allowSetController: boolean;
  pauseTransfers: boolean;
};

export type JBFundingCycleMetadataStruct = {
  global: JBGlobalFundingCycleMetadataStruct;
  reservedRate: BigNumberish;
  redemptionRate: BigNumberish;
  ballotRedemptionRate: BigNumberish;
  pausePay: boolean;
  pauseDistributions: boolean;
  pauseRedeem: boolean;
  pauseBurn: boolean;
  allowMinting: boolean;
  allowTerminalMigration: boolean;
  allowControllerMigration: boolean;
  holdFees: boolean;
  preferClaimedTokenOverride: boolean;
  useTotalOverflowForRedemptions: boolean;
  useDataSourceForPay: boolean;
  useDataSourceForRedeem: boolean;
  dataSource: string;
  metadata: BigNumberish;
};

export type JBFundingCycleMetadataStructOutput = [
  JBGlobalFundingCycleMetadataStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  string,
  BigNumber
] & {
  global: JBGlobalFundingCycleMetadataStructOutput;
  reservedRate: BigNumber;
  redemptionRate: BigNumber;
  ballotRedemptionRate: BigNumber;
  pausePay: boolean;
  pauseDistributions: boolean;
  pauseRedeem: boolean;
  pauseBurn: boolean;
  allowMinting: boolean;
  allowTerminalMigration: boolean;
  allowControllerMigration: boolean;
  holdFees: boolean;
  preferClaimedTokenOverride: boolean;
  useTotalOverflowForRedemptions: boolean;
  useDataSourceForPay: boolean;
  useDataSourceForRedeem: boolean;
  dataSource: string;
  metadata: BigNumber;
};

export type JBFundingCycleDataStruct = {
  duration: BigNumberish;
  weight: BigNumberish;
  discountRate: BigNumberish;
  ballot: string;
};

export type JBFundingCycleDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  duration: BigNumber;
  weight: BigNumber;
  discountRate: BigNumber;
  ballot: string;
};

export type JBGroupedSplitsStruct = {
  group: BigNumberish;
  splits: JBSplitStruct[];
};

export type JBGroupedSplitsStructOutput = [BigNumber, JBSplitStructOutput[]] & {
  group: BigNumber;
  splits: JBSplitStructOutput[];
};

export type JBFundAccessConstraintsStruct = {
  terminal: string;
  token: string;
  distributionLimit: BigNumberish;
  distributionLimitCurrency: BigNumberish;
  overflowAllowance: BigNumberish;
  overflowAllowanceCurrency: BigNumberish;
};

export type JBFundAccessConstraintsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  terminal: string;
  token: string;
  distributionLimit: BigNumber;
  distributionLimitCurrency: BigNumber;
  overflowAllowance: BigNumber;
  overflowAllowanceCurrency: BigNumber;
};

export type JBProjectMetadataStruct = { content: string; domain: BigNumberish };

export type JBProjectMetadataStructOutput = [string, BigNumber] & {
  content: string;
  domain: BigNumber;
};

export interface JBController3_1Interface extends utils.Interface {
  functions: {
    "burnTokensOf(address,uint256,uint256,string,bool)": FunctionFragment;
    "currentFundingCycleOf(uint256)": FunctionFragment;
    "directory()": FunctionFragment;
    "distributeReservedTokensOf(uint256,string)": FunctionFragment;
    "fundAccessConstraintsStore()": FunctionFragment;
    "fundingCycleStore()": FunctionFragment;
    "getFundingCycleOf(uint256,uint256)": FunctionFragment;
    "latestConfiguredFundingCycleOf(uint256)": FunctionFragment;
    "launchFundingCyclesFor(uint256,(uint256,uint256,uint256,address),((bool,bool,bool),uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address,uint256),uint256,(uint256,(bool,bool,uint256,uint256,address,uint256,address)[])[],(address,address,uint256,uint256,uint256,uint256)[],address[],string)": FunctionFragment;
    "launchProjectFor(address,(string,uint256),(uint256,uint256,uint256,address),((bool,bool,bool),uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address,uint256),uint256,(uint256,(bool,bool,uint256,uint256,address,uint256,address)[])[],(address,address,uint256,uint256,uint256,uint256)[],address[],string)": FunctionFragment;
    "migrate(uint256,address)": FunctionFragment;
    "mintTokensOf(uint256,uint256,address,string,bool,bool)": FunctionFragment;
    "operatorStore()": FunctionFragment;
    "prepForMigrationOf(uint256,address)": FunctionFragment;
    "projects()": FunctionFragment;
    "queuedFundingCycleOf(uint256)": FunctionFragment;
    "reconfigureFundingCyclesOf(uint256,(uint256,uint256,uint256,address),((bool,bool,bool),uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address,uint256),uint256,(uint256,(bool,bool,uint256,uint256,address,uint256,address)[])[],(address,address,uint256,uint256,uint256,uint256)[],string)": FunctionFragment;
    "reservedTokenBalanceOf(uint256)": FunctionFragment;
    "splitsStore()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenStore()": FunctionFragment;
    "totalOutstandingTokensOf(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnTokensOf"
      | "currentFundingCycleOf"
      | "directory"
      | "distributeReservedTokensOf"
      | "fundAccessConstraintsStore"
      | "fundingCycleStore"
      | "getFundingCycleOf"
      | "latestConfiguredFundingCycleOf"
      | "launchFundingCyclesFor"
      | "launchProjectFor"
      | "migrate"
      | "mintTokensOf"
      | "operatorStore"
      | "prepForMigrationOf"
      | "projects"
      | "queuedFundingCycleOf"
      | "reconfigureFundingCyclesOf"
      | "reservedTokenBalanceOf"
      | "splitsStore"
      | "supportsInterface"
      | "tokenStore"
      | "totalOutstandingTokensOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burnTokensOf",
    values: [string, BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFundingCycleOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeReservedTokensOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAccessConstraintsStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingCycleStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingCycleOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfiguredFundingCycleOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "launchFundingCyclesFor",
    values: [
      BigNumberish,
      JBFundingCycleDataStruct,
      JBFundingCycleMetadataStruct,
      BigNumberish,
      JBGroupedSplitsStruct[],
      JBFundAccessConstraintsStruct[],
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "launchProjectFor",
    values: [
      string,
      JBProjectMetadataStruct,
      JBFundingCycleDataStruct,
      JBFundingCycleMetadataStruct,
      BigNumberish,
      JBGroupedSplitsStruct[],
      JBFundAccessConstraintsStruct[],
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokensOf",
    values: [BigNumberish, BigNumberish, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepForMigrationOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queuedFundingCycleOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reconfigureFundingCyclesOf",
    values: [
      BigNumberish,
      JBFundingCycleDataStruct,
      JBFundingCycleMetadataStruct,
      BigNumberish,
      JBGroupedSplitsStruct[],
      JBFundAccessConstraintsStruct[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reservedTokenBalanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutstandingTokensOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnTokensOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentFundingCycleOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeReservedTokensOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundAccessConstraintsStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingCycleStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingCycleOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfiguredFundingCycleOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchFundingCyclesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchProjectFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintTokensOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepForMigrationOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queuedFundingCycleOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reconfigureFundingCyclesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitsStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalOutstandingTokensOf",
    data: BytesLike
  ): Result;

  events: {
    "BurnTokens(address,uint256,uint256,string,address)": EventFragment;
    "DistributeReservedTokens(uint256,uint256,uint256,address,uint256,uint256,string,address)": EventFragment;
    "DistributeToReservedTokenSplit(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address),uint256,address)": EventFragment;
    "LaunchFundingCycles(uint256,uint256,string,address)": EventFragment;
    "LaunchProject(uint256,uint256,string,address)": EventFragment;
    "Migrate(uint256,address,address)": EventFragment;
    "MintTokens(address,uint256,uint256,uint256,string,uint256,address)": EventFragment;
    "PrepMigration(uint256,address,address)": EventFragment;
    "ReconfigureFundingCycles(uint256,uint256,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeReservedTokens"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DistributeToReservedTokenSplit"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LaunchFundingCycles"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LaunchProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrepMigration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReconfigureFundingCycles"): EventFragment;
}

export interface BurnTokensEventObject {
  holder: string;
  projectId: BigNumber;
  tokenCount: BigNumber;
  memo: string;
  caller: string;
}
export type BurnTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  BurnTokensEventObject
>;

export type BurnTokensEventFilter = TypedEventFilter<BurnTokensEvent>;

export interface DistributeReservedTokensEventObject {
  fundingCycleConfiguration: BigNumber;
  fundingCycleNumber: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  tokenCount: BigNumber;
  beneficiaryTokenCount: BigNumber;
  memo: string;
  caller: string;
}
export type DistributeReservedTokensEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  DistributeReservedTokensEventObject
>;

export type DistributeReservedTokensEventFilter =
  TypedEventFilter<DistributeReservedTokensEvent>;

export interface DistributeToReservedTokenSplitEventObject {
  projectId: BigNumber;
  domain: BigNumber;
  group: BigNumber;
  split: JBSplitStructOutput;
  tokenCount: BigNumber;
  caller: string;
}
export type DistributeToReservedTokenSplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, JBSplitStructOutput, BigNumber, string],
  DistributeToReservedTokenSplitEventObject
>;

export type DistributeToReservedTokenSplitEventFilter =
  TypedEventFilter<DistributeToReservedTokenSplitEvent>;

export interface LaunchFundingCyclesEventObject {
  configuration: BigNumber;
  projectId: BigNumber;
  memo: string;
  caller: string;
}
export type LaunchFundingCyclesEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  LaunchFundingCyclesEventObject
>;

export type LaunchFundingCyclesEventFilter =
  TypedEventFilter<LaunchFundingCyclesEvent>;

export interface LaunchProjectEventObject {
  configuration: BigNumber;
  projectId: BigNumber;
  memo: string;
  caller: string;
}
export type LaunchProjectEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  LaunchProjectEventObject
>;

export type LaunchProjectEventFilter = TypedEventFilter<LaunchProjectEvent>;

export interface MigrateEventObject {
  projectId: BigNumber;
  to: string;
  caller: string;
}
export type MigrateEvent = TypedEvent<
  [BigNumber, string, string],
  MigrateEventObject
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export interface MintTokensEventObject {
  beneficiary: string;
  projectId: BigNumber;
  tokenCount: BigNumber;
  beneficiaryTokenCount: BigNumber;
  memo: string;
  reservedRate: BigNumber;
  caller: string;
}
export type MintTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber, string],
  MintTokensEventObject
>;

export type MintTokensEventFilter = TypedEventFilter<MintTokensEvent>;

export interface PrepMigrationEventObject {
  projectId: BigNumber;
  from: string;
  caller: string;
}
export type PrepMigrationEvent = TypedEvent<
  [BigNumber, string, string],
  PrepMigrationEventObject
>;

export type PrepMigrationEventFilter = TypedEventFilter<PrepMigrationEvent>;

export interface ReconfigureFundingCyclesEventObject {
  configuration: BigNumber;
  projectId: BigNumber;
  memo: string;
  caller: string;
}
export type ReconfigureFundingCyclesEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ReconfigureFundingCyclesEventObject
>;

export type ReconfigureFundingCyclesEventFilter =
  TypedEventFilter<ReconfigureFundingCyclesEvent>;

export interface JBController3_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBController3_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _memo: string,
      _preferClaimedTokens: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currentFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
      }
    >;

    directory(overrides?: CallOverrides): Promise<[string]>;

    distributeReservedTokensOf(
      _projectId: BigNumberish,
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fundAccessConstraintsStore(overrides?: CallOverrides): Promise<[string]>;

    fundingCycleStore(overrides?: CallOverrides): Promise<[string]>;

    getFundingCycleOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
      }
    >;

    latestConfiguredFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        JBFundingCycleStructOutput,
        JBFundingCycleMetadataStructOutput,
        number
      ] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
        ballotState: number;
      }
    >;

    launchFundingCyclesFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    launchProjectFor(
      _owner: string,
      _projectMetadata: JBProjectMetadataStruct,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintTokensOf(
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferClaimedTokens: boolean,
      _useReservedRate: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    operatorStore(overrides?: CallOverrides): Promise<[string]>;

    prepForMigrationOf(
      _projectId: BigNumberish,
      _from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    queuedFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
      }
    >;

    reconfigureFundingCyclesOf(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reservedTokenBalanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    splitsStore(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenStore(overrides?: CallOverrides): Promise<[string]>;

    totalOutstandingTokensOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  burnTokensOf(
    _holder: string,
    _projectId: BigNumberish,
    _tokenCount: BigNumberish,
    _memo: string,
    _preferClaimedTokens: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currentFundingCycleOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
      fundingCycle: JBFundingCycleStructOutput;
      metadata: JBFundingCycleMetadataStructOutput;
    }
  >;

  directory(overrides?: CallOverrides): Promise<string>;

  distributeReservedTokensOf(
    _projectId: BigNumberish,
    _memo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fundAccessConstraintsStore(overrides?: CallOverrides): Promise<string>;

  fundingCycleStore(overrides?: CallOverrides): Promise<string>;

  getFundingCycleOf(
    _projectId: BigNumberish,
    _configuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
      fundingCycle: JBFundingCycleStructOutput;
      metadata: JBFundingCycleMetadataStructOutput;
    }
  >;

  latestConfiguredFundingCycleOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput, number] & {
      fundingCycle: JBFundingCycleStructOutput;
      metadata: JBFundingCycleMetadataStructOutput;
      ballotState: number;
    }
  >;

  launchFundingCyclesFor(
    _projectId: BigNumberish,
    _data: JBFundingCycleDataStruct,
    _metadata: JBFundingCycleMetadataStruct,
    _mustStartAtOrAfter: BigNumberish,
    _groupedSplits: JBGroupedSplitsStruct[],
    _fundAccessConstraints: JBFundAccessConstraintsStruct[],
    _terminals: string[],
    _memo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  launchProjectFor(
    _owner: string,
    _projectMetadata: JBProjectMetadataStruct,
    _data: JBFundingCycleDataStruct,
    _metadata: JBFundingCycleMetadataStruct,
    _mustStartAtOrAfter: BigNumberish,
    _groupedSplits: JBGroupedSplitsStruct[],
    _fundAccessConstraints: JBFundAccessConstraintsStruct[],
    _terminals: string[],
    _memo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  migrate(
    _projectId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintTokensOf(
    _projectId: BigNumberish,
    _tokenCount: BigNumberish,
    _beneficiary: string,
    _memo: string,
    _preferClaimedTokens: boolean,
    _useReservedRate: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  operatorStore(overrides?: CallOverrides): Promise<string>;

  prepForMigrationOf(
    _projectId: BigNumberish,
    _from: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  projects(overrides?: CallOverrides): Promise<string>;

  queuedFundingCycleOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
      fundingCycle: JBFundingCycleStructOutput;
      metadata: JBFundingCycleMetadataStructOutput;
    }
  >;

  reconfigureFundingCyclesOf(
    _projectId: BigNumberish,
    _data: JBFundingCycleDataStruct,
    _metadata: JBFundingCycleMetadataStruct,
    _mustStartAtOrAfter: BigNumberish,
    _groupedSplits: JBGroupedSplitsStruct[],
    _fundAccessConstraints: JBFundAccessConstraintsStruct[],
    _memo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reservedTokenBalanceOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  splitsStore(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenStore(overrides?: CallOverrides): Promise<string>;

  totalOutstandingTokensOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    burnTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _memo: string,
      _preferClaimedTokens: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    currentFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
      }
    >;

    directory(overrides?: CallOverrides): Promise<string>;

    distributeReservedTokensOf(
      _projectId: BigNumberish,
      _memo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundAccessConstraintsStore(overrides?: CallOverrides): Promise<string>;

    fundingCycleStore(overrides?: CallOverrides): Promise<string>;

    getFundingCycleOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
      }
    >;

    latestConfiguredFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        JBFundingCycleStructOutput,
        JBFundingCycleMetadataStructOutput,
        number
      ] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
        ballotState: number;
      }
    >;

    launchFundingCyclesFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchProjectFor(
      _owner: string,
      _projectMetadata: JBProjectMetadataStruct,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTokensOf(
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferClaimedTokens: boolean,
      _useReservedRate: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorStore(overrides?: CallOverrides): Promise<string>;

    prepForMigrationOf(
      _projectId: BigNumberish,
      _from: string,
      overrides?: CallOverrides
    ): Promise<void>;

    projects(overrides?: CallOverrides): Promise<string>;

    queuedFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, JBFundingCycleMetadataStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
        metadata: JBFundingCycleMetadataStructOutput;
      }
    >;

    reconfigureFundingCyclesOf(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _memo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reservedTokenBalanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitsStore(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenStore(overrides?: CallOverrides): Promise<string>;

    totalOutstandingTokensOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BurnTokens(address,uint256,uint256,string,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      tokenCount?: null,
      memo?: null,
      caller?: null
    ): BurnTokensEventFilter;
    BurnTokens(
      holder?: string | null,
      projectId?: BigNumberish | null,
      tokenCount?: null,
      memo?: null,
      caller?: null
    ): BurnTokensEventFilter;

    "DistributeReservedTokens(uint256,uint256,uint256,address,uint256,uint256,string,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      tokenCount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      caller?: null
    ): DistributeReservedTokensEventFilter;
    DistributeReservedTokens(
      fundingCycleConfiguration?: BigNumberish | null,
      fundingCycleNumber?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: null,
      tokenCount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      caller?: null
    ): DistributeReservedTokensEventFilter;

    "DistributeToReservedTokenSplit(uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address),uint256,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      tokenCount?: null,
      caller?: null
    ): DistributeToReservedTokenSplitEventFilter;
    DistributeToReservedTokenSplit(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      tokenCount?: null,
      caller?: null
    ): DistributeToReservedTokenSplitEventFilter;

    "LaunchFundingCycles(uint256,uint256,string,address)"(
      configuration?: null,
      projectId?: null,
      memo?: null,
      caller?: null
    ): LaunchFundingCyclesEventFilter;
    LaunchFundingCycles(
      configuration?: null,
      projectId?: null,
      memo?: null,
      caller?: null
    ): LaunchFundingCyclesEventFilter;

    "LaunchProject(uint256,uint256,string,address)"(
      configuration?: null,
      projectId?: null,
      memo?: null,
      caller?: null
    ): LaunchProjectEventFilter;
    LaunchProject(
      configuration?: null,
      projectId?: null,
      memo?: null,
      caller?: null
    ): LaunchProjectEventFilter;

    "Migrate(uint256,address,address)"(
      projectId?: BigNumberish | null,
      to?: null,
      caller?: null
    ): MigrateEventFilter;
    Migrate(
      projectId?: BigNumberish | null,
      to?: null,
      caller?: null
    ): MigrateEventFilter;

    "MintTokens(address,uint256,uint256,uint256,string,uint256,address)"(
      beneficiary?: string | null,
      projectId?: BigNumberish | null,
      tokenCount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      reservedRate?: null,
      caller?: null
    ): MintTokensEventFilter;
    MintTokens(
      beneficiary?: string | null,
      projectId?: BigNumberish | null,
      tokenCount?: null,
      beneficiaryTokenCount?: null,
      memo?: null,
      reservedRate?: null,
      caller?: null
    ): MintTokensEventFilter;

    "PrepMigration(uint256,address,address)"(
      projectId?: BigNumberish | null,
      from?: null,
      caller?: null
    ): PrepMigrationEventFilter;
    PrepMigration(
      projectId?: BigNumberish | null,
      from?: null,
      caller?: null
    ): PrepMigrationEventFilter;

    "ReconfigureFundingCycles(uint256,uint256,string,address)"(
      configuration?: null,
      projectId?: null,
      memo?: null,
      caller?: null
    ): ReconfigureFundingCyclesEventFilter;
    ReconfigureFundingCycles(
      configuration?: null,
      projectId?: null,
      memo?: null,
      caller?: null
    ): ReconfigureFundingCyclesEventFilter;
  };

  estimateGas: {
    burnTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _memo: string,
      _preferClaimedTokens: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currentFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directory(overrides?: CallOverrides): Promise<BigNumber>;

    distributeReservedTokensOf(
      _projectId: BigNumberish,
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fundAccessConstraintsStore(overrides?: CallOverrides): Promise<BigNumber>;

    fundingCycleStore(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingCycleOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestConfiguredFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchFundingCyclesFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    launchProjectFor(
      _owner: string,
      _projectMetadata: JBProjectMetadataStruct,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintTokensOf(
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferClaimedTokens: boolean,
      _useReservedRate: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    operatorStore(overrides?: CallOverrides): Promise<BigNumber>;

    prepForMigrationOf(
      _projectId: BigNumberish,
      _from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    queuedFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reconfigureFundingCyclesOf(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reservedTokenBalanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitsStore(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenStore(overrides?: CallOverrides): Promise<BigNumber>;

    totalOutstandingTokensOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnTokensOf(
      _holder: string,
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _memo: string,
      _preferClaimedTokens: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currentFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeReservedTokensOf(
      _projectId: BigNumberish,
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fundAccessConstraintsStore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingCycleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundingCycleOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestConfiguredFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchFundingCyclesFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    launchProjectFor(
      _owner: string,
      _projectMetadata: JBProjectMetadataStruct,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _terminals: string[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintTokensOf(
      _projectId: BigNumberish,
      _tokenCount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferClaimedTokens: boolean,
      _useReservedRate: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    operatorStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepForMigrationOf(
      _projectId: BigNumberish,
      _from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedFundingCycleOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reconfigureFundingCyclesOf(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: JBFundingCycleMetadataStruct,
      _mustStartAtOrAfter: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      _memo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reservedTokenBalanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitsStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalOutstandingTokensOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
